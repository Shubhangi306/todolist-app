{"version":3,"sources":["components/Display.js","components/AddItem.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Display","todoItems","deleteItem","crossItem","itemList","length","map","task","index","Item","className","key","id","style","textDecoration","crossed","onClick","Addform","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","addItem","onSubmit","this","htmlFor","type","placeholder","onChange","React","Component","Navbar","heading","App","todoItem","newList","filter","item","AddItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAyBeA,G,KAtBA,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,UAAUC,EAAwB,EAAxBA,WAAWC,EAAa,EAAbA,UAE5BC,EAAUH,EAAUI,OAAQJ,EAAUK,KAAI,SAACC,EAAMC,GAAW,IACxDC,EAAMF,EAANE,KACN,OACI,yBAAKC,UAAU,OAAOC,IAAKJ,EAAKK,IAC5B,yBAAKF,UAAU,QACX,8BAAOF,EAAM,EAAb,KAAuB,uBAAGE,UAAU,cAAcG,MAAO,CAACC,eAAgBP,EAAKQ,QAAS,eAAgB,SAAUN,GAClH,4BAAQC,UAAU,eAAeM,QAAS,WAAKb,EAAUI,EAAKK,MAA9D,QACA,4BAAQF,UAAU,gBAAgBM,QAAS,WAAOd,EAAWK,EAAKK,MAAlE,eAKZ,uBAAGF,UAAU,cAAb,oBACJ,OACA,yBAAKA,UAAU,gBACVN,KCkBMa,E,4MAlCXC,MAAQ,CACJT,KAAK,I,EAGTU,aAAe,SAACC,GACZ,EAAKC,SAAS,CACXZ,KAAMW,EAAME,OAAOC,S,EAI1BC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVZ,KAAK,M,uDAKT,OACI,yBAAKC,UAAU,WAAWkB,SAAUC,KAAKL,cACrC,0BAAMd,UAAU,cACZ,2BAAQoB,QAAQ,WAAWpB,UAAU,cAArC,aACA,2BAAOqB,KAAK,OAAOnB,GAAG,WAAWoB,YAAY,eAAetB,UAAU,YAAYuB,SAAUJ,KAAKV,aAAcI,MAAOM,KAAKX,MAAMT,OACjI,2BAAOsB,KAAK,SAASR,MAAM,MAAMb,UAAU,qB,GAzBzCwB,IAAMC,WCOZC,EARD,SAACV,GACX,OACI,yBAAKhB,UAAU,WACX,wBAAIA,UAAU,YAAYgB,EAAMW,WCoD9BC,E,4MAlDbpB,MAAQ,CACNjB,UAAW,CACX,CAACW,GAAG,EAAEH,KAAK,mBAAmBM,SAAQ,GACtC,CAACH,GAAG,EAAEH,KAAK,oBAAoBM,SAAQ,GACvC,CAACH,GAAG,EAAEH,KAAK,eAAeM,SAAQ,K,EAItCY,QAAU,SAACY,GACPA,EAAS3B,GAAK,EAAKM,MAAMjB,UAAUI,OAAQ,EAC3CkC,EAASxB,SAAQ,EACjB,IAAId,EAAU,GAAD,mBAAK,EAAKiB,MAAMjB,WAAhB,CAA0BsC,IACvC,EAAKlB,SAAS,CACZpB,UAAUA,K,EAKhBC,WAAY,SAACU,GACV,IAAI4B,EAAU,EAAKtB,MAAMjB,UAAUwC,QAAO,SAAAC,GACxC,OAAOA,EAAK9B,KAAKA,KAEnB,EAAKS,SAAS,CACZpB,UAAUuC,K,EAIfrC,UAAW,SAACS,GACT,EAAKS,SAAS,CACZZ,KAAM,EAAKS,MAAMjB,UAAUK,KAAI,SAAAoC,GAI7B,OAHGA,EAAK9B,KAAKA,IACX8B,EAAK3B,SAAQ,GAER2B,Q,uDAMV,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAQ2B,QAAQ,cAChB,kBAAC,EAAD,CAASpC,UAAW4B,KAAKX,MAAMjB,UAAWC,WAAY2B,KAAK3B,WAAYC,UAAW0B,KAAK1B,YACvF,kBAACwC,EAAD,CAAShB,QAASE,KAAKF,e,GA7CbO,IAAMC,WCOJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ad9fccd9.chunk.js","sourcesContent":["import React from'react';\r\nimport './display.css';\r\n\r\nconst Display =({todoItems,deleteItem,crossItem})=>{\r\n    //console.log(todoItems);\r\n    const itemList =todoItems.length? todoItems.map((task, index) => {\r\n        const{Item}=task\r\n        return(\r\n            <div className='item' key={task.id}>\r\n                <div className='task'>\r\n                    <span>{index+1}.</span><p className='inside-task' style={{textDecoration: task.crossed? 'line-through' :'none'}}>{Item}</p>\r\n                    <button className='cross-button' onClick={()=>{crossItem(task.id)}} >Done</button>\r\n                    <button className='delete-button' onClick={() => {deleteItem(task.id)}}>Delete</button>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }): <p className='empty-list'>Nothing to do!!!</p>\r\n    return(\r\n    <div className='display-item'>\r\n        {itemList}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\nimport './display.css'\r\n\r\nclass Addform extends React.Component {\r\n    state = {\r\n        Item:''\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n           Item: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.addItem(this.state);\r\n        this.setState({\r\n            Item:''\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='for-form' onSubmit={this.handleSubmit}>\r\n                <form className='form-style'>\r\n                    <label  htmlFor='todotask' className='item-label' >To&nbsp;do:</label>\r\n                    <input type='text' id='todotask' placeholder='Type here...' className='todo-task' onChange={this.handleChange} value={this.state.Item}></input>\r\n                    <input type='submit' value='Add' className='add-button'></input>\r\n                </form>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n    }\r\n   \r\n\r\nexport default Addform;","import React from 'react';\r\nimport './display.css'\r\n const Navbar =(props) => {\r\n     return(\r\n         <nav className='nav-bar'>\r\n             <h1 className='app-head'>{props.heading}</h1>\r\n         </nav>\r\n     );\r\n }\r\n\r\n export default Navbar;","import React from 'react';\r\nimport Display from './components/Display';\r\nimport AddItem from './components/AddItem';\r\nimport Navbar from './components/Navbar';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    todoItems: [\r\n    {id:1,Item:'Send Invitations',crossed:false},\r\n    {id:2,Item:'Plan a test drive',crossed:false},\r\n    {id:3,Item:'Order a cake',crossed:false}\r\n  ]\r\n}\r\n\r\naddItem = (todoItem) => {\r\n    todoItem.id = this.state.todoItems.length +1; \r\n    todoItem.crossed=false;\r\n    let todoItems=[...this.state.todoItems,todoItem];\r\n    this.setState({\r\n      todoItems:todoItems\r\n    })\r\n\r\n}\r\n\r\ndeleteItem =(id) => {\r\n   let newList = this.state.todoItems.filter(item =>{\r\n     return item.id!==id\r\n   });\r\n   this.setState({\r\n     todoItems:newList\r\n   })\r\n}\r\n\r\ncrossItem =(id) => {\r\n   this.setState({\r\n     Item: this.state.todoItems.map(item => {\r\n       if(item.id===id){\r\n         item.crossed=true;\r\n       }\r\n       return item;\r\n     })\r\n    })\r\n}\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar heading='ToDo List'></Navbar>\r\n        <Display todoItems={this.state.todoItems} deleteItem={this.deleteItem} crossItem={this.crossItem} />\r\n        <AddItem addItem={this.addItem} />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}